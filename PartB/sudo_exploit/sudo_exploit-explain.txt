Please provide an explanation about how you construct your solution (the program name):


- What value(s) did you overwrite? How did you find them? (subpart1)
  - Find the values from user_detail from gdb into sudo.c
  - Get address of user_detail.uid from above and mark this address as the address to overwrite
  - Using the string formats, write nothing before so that the the marked address can be overwritten with zeros when we accuractly %n into the right area (since marked address has null byte, use 1 byte before that

- What value(s) did you overwrite? How did you find them? (subpart2)
  - Having determined tha address to change above, use gdb inside the .sh file to run the program. Vfprintf is where the %n string format runs into issues and thus trace the stack at this function call. 
  - Find our injected string in the stack to determine the position %n should be at to call its own injected marked address so that we can %n and over write our injected mark address
  - When it is done, we find that the pointer for ap changes, do the steps above again to count where our injected address is on the stack again and add padding to the injected string so %n can once again land in our injected marked address  
  - repeat the whole process once more as student but without gdb, we have to use %x and echo to see what address we are hitting and change the argument postion of %n and and padding accordingly until we can hit our injected marked address again  

  - While the address might be randomized, we do not expect to offsets between them to change since the call order of the stack is not going to change with ASLRon. However, we will not be able to accurately determine the marked address we hope to overwrite (user_details.uid) with ASLR and thus affecting the exploit


- Did you meet the problem that addresses inside/outside GDB are different? Is that a problem or how did you overcome it?


- Other comments:  

